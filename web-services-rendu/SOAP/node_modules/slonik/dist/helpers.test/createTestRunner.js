"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestRunner = void 0;
const __1 = require("..");
const createPool_1 = require("../factories/createPool");
const ava_1 = __importDefault(require("ava"));
// eslint-disable-next-line n/no-process-env
const POSTGRES_DSN = process.env.POSTGRES_DSN ?? 'postgres@localhost:5432';
const createTestRunner = (driverFactory, name) => {
    let testId = 0;
    const test = ava_1.default;
    const { beforeEach } = test;
    const TEMPLATE_DATABASE_NAME = 'slonik_test';
    beforeEach(async (t) => {
        ++testId;
        const TEST_DATABASE_NAME = ['slonik_test', name, String(testId)].join('_');
        t.context = {
            dsn: 'postgresql://' + POSTGRES_DSN + '/' + TEST_DATABASE_NAME,
            testDatabaseName: TEST_DATABASE_NAME,
        };
        const pool0 = await (0, createPool_1.createPool)('postgresql://' + POSTGRES_DSN, {
            driverFactory,
            maximumPoolSize: 1,
        });
        await pool0.connect(async (connection) => {
            await connection.query(__1.sql.unsafe `
        SELECT pg_terminate_backend(pid)
        FROM pg_stat_activity
        WHERE
          pid != pg_backend_pid() AND
          datname = ${TEMPLATE_DATABASE_NAME}
      `);
            await connection.query(__1.sql.unsafe `DROP DATABASE IF EXISTS ${__1.sql.identifier([
                TEST_DATABASE_NAME,
            ])}`);
            await connection.query(__1.sql.unsafe `CREATE DATABASE ${__1.sql.identifier([TEST_DATABASE_NAME])}`);
        });
        await pool0.end();
        const pool1 = await (0, createPool_1.createPool)(t.context.dsn, {
            driverFactory,
            maximumPoolSize: 1,
        });
        await pool1.connect(async (connection) => {
            await connection.query(__1.sql.unsafe `
        CREATE TABLE person (
          id SERIAL PRIMARY KEY,
          name text NOT NULL,
          tags text[],
          birth_date date,
          payload bytea,
          molecules int8,
          updated_no_tz_at timestamp without time zone NOT NULL DEFAULT now(),
          updated_at timestamp with time zone NOT NULL DEFAULT now()
        )
      `);
        });
        await pool1.end();
    });
    return {
        test,
    };
};
exports.createTestRunner = createTestRunner;
//# sourceMappingURL=createTestRunner.js.map