"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPoolWithSpy = void 0;
const createPool_1 = require("../factories/createPool");
const sinon = __importStar(require("sinon"));
const createPoolWithSpy = async (dsn, { driverFactory, ...configuration }) => {
    const spy = {
        acquire: sinon.spy(),
        destroy: sinon.spy(),
        query: sinon.spy(),
        release: sinon.spy(),
    };
    let connection;
    const pool = await (0, createPool_1.createPool)(dsn, {
        driverFactory: async (...args) => {
            if (!driverFactory) {
                throw new Error('Driver is required');
            }
            const driver = await driverFactory(...args);
            return {
                createClient: async () => {
                    if (connection) {
                        return connection;
                    }
                    // We are re-using the same connection for all queries
                    // as it makes it easier to spy on the connection.
                    // eslint-disable-next-line require-atomic-updates
                    connection = await driver.createClient();
                    spy.acquire = sinon.spy(connection, 'acquire');
                    spy.destroy = sinon.spy(connection, 'destroy');
                    spy.query = sinon.spy(connection, 'query');
                    spy.release = sinon.spy(connection, 'release');
                    return connection;
                },
            };
        },
        ...configuration,
    });
    return {
        pool,
        spy,
    };
};
exports.createPoolWithSpy = createPoolWithSpy;
//# sourceMappingURL=createPoolWithSpy.js.map