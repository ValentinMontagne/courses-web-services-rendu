import { type TypedReadable } from '../types';
import { type Driver, type DriverClientEventEmitter, type DriverClientState, type DriverQueryResult, type DriverStreamResult } from './createDriverFactory';
export type ConnectionPoolClient = {
    acquire: () => void;
    destroy: () => Promise<void>;
    id: () => string;
    off: DriverClientEventEmitter['off'];
    on: DriverClientEventEmitter['on'];
    query: (query: string, values?: unknown[]) => Promise<DriverQueryResult>;
    release: () => Promise<void>;
    removeListener: DriverClientEventEmitter['removeListener'];
    state: () => DriverClientState;
    stream: (query: string, values?: unknown[]) => TypedReadable<DriverStreamResult>;
};
type ConnectionPoolStateName = 'ACTIVE' | 'ENDING' | 'ENDED';
/**
 * @property {number} acquiredConnections - The number of connections that are currently acquired.
 */
type ConnectionPoolState = {
    acquiredConnections: number;
    idleConnections: number;
    pendingDestroyConnections: number;
    pendingReleaseConnections: number;
    state: ConnectionPoolStateName;
    waitingClients: number;
};
export type ConnectionPool = {
    acquire: () => Promise<ConnectionPoolClient>;
    end: () => Promise<void>;
    id: () => string;
    state: () => ConnectionPoolState;
};
export declare const createConnectionPool: ({ driver, poolSize, }: {
    driver: Driver;
    idleTimeout?: number | undefined;
    poolSize?: number | undefined;
}) => ConnectionPool;
export {};
//# sourceMappingURL=createConnectionPool.d.ts.map