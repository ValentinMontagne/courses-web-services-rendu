"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createQuerySqlFragment = void 0;
const errors_1 = require("../errors");
const slonikPlaceholderRegexRule_1 = require("../regexRules/slonikPlaceholderRegexRule");
const formatSlonikPlaceholder_1 = require("../utilities/formatSlonikPlaceholder");
const createQuerySqlFragment = (token, greatestParameterPosition) => {
    let sql = '';
    let leastMatchedParameterPosition = Number.POSITIVE_INFINITY;
    let greatestMatchedParameterPosition = 0;
    sql += token.sql.replaceAll(slonikPlaceholderRegexRule_1.slonikPlaceholderRegexRule, (match, g1) => {
        const parameterPosition = Number.parseInt(g1, 10);
        if (parameterPosition > greatestMatchedParameterPosition) {
            greatestMatchedParameterPosition = parameterPosition;
        }
        if (parameterPosition < leastMatchedParameterPosition) {
            leastMatchedParameterPosition = parameterPosition;
        }
        return (0, formatSlonikPlaceholder_1.formatSlonikPlaceholder)(parameterPosition + greatestParameterPosition);
    });
    if (greatestMatchedParameterPosition > token.values.length) {
        throw new errors_1.UnexpectedStateError('The greatest parameter position is greater than the number of parameter values.');
    }
    if (leastMatchedParameterPosition !== Number.POSITIVE_INFINITY &&
        leastMatchedParameterPosition !== 1) {
        throw new errors_1.UnexpectedStateError('Parameter position must start at 1.');
    }
    return {
        sql,
        values: token.values,
    };
};
exports.createQuerySqlFragment = createQuerySqlFragment;
//# sourceMappingURL=createQuerySqlFragment.js.map