"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const createPgDriverFactory_1 = require("../factories/createPgDriverFactory");
const createPool_1 = require("../factories/createPool");
const createSqlTag_1 = require("../factories/createSqlTag");
const createTestRunner_1 = require("../helpers.test/createTestRunner");
const driverFactory = (0, createPgDriverFactory_1.createPgDriverFactory)();
const { test } = (0, createTestRunner_1.createTestRunner)(driverFactory, 'pg');
const sql = (0, createSqlTag_1.createSqlTag)();
test('returns empty array if no rows are returned', async (t) => {
    const pool = await (0, createPool_1.createPool)(t.context.dsn, {
        driverFactory,
    });
    const result = await pool.anyFirst(sql.unsafe `
    SELECT *
    FROM (VALUES (1)) as t(id)
    WHERE false
  `);
    t.deepEqual(result, []);
});
test('returns first column values of the query result rows', async (t) => {
    const pool = await (0, createPool_1.createPool)(t.context.dsn, {
        driverFactory,
    });
    const result = await pool.anyFirst(sql.unsafe `
    SELECT *
    FROM (VALUES (1), (2)) as t(id)
  `);
    t.deepEqual(result, [1, 2]);
});
test('throws an error if more than one column is returned', async (t) => {
    const pool = await (0, createPool_1.createPool)(t.context.dsn, {
        driverFactory,
    });
    const error = await t.throwsAsync(pool.anyFirst(sql.unsafe `
      SELECT *
      FROM (VALUES (1, 'foo')) as t(id, name)
    `));
    t.true(error instanceof errors_1.DataIntegrityError);
});
//# sourceMappingURL=anyFirst.test.js.map