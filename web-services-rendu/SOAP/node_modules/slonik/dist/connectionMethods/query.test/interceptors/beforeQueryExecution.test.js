"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const createPgDriverFactory_1 = require("../../../factories/createPgDriverFactory");
const createSqlTag_1 = require("../../../factories/createSqlTag");
const createPoolWithMockedQuery_1 = require("../../../helpers.test/createPoolWithMockedQuery");
const createTestRunner_1 = require("../../../helpers.test/createTestRunner");
const driverFactory = (0, createPgDriverFactory_1.createPgDriverFactory)();
const { test } = (0, createTestRunner_1.createTestRunner)(driverFactory, 'pg');
const sql = (0, createSqlTag_1.createSqlTag)();
test('short-circuits the query execution', async (t) => {
    const { pool, query } = await (0, createPoolWithMockedQuery_1.createPoolWithMockedQuery)(t.context.dsn, {
        driverFactory,
        interceptors: [
            {
                beforeQueryExecution: () => {
                    return {
                        command: 'SELECT',
                        fields: [],
                        notices: [],
                        rowCount: 1,
                        rows: [
                            {
                                foo: 2,
                            },
                        ],
                        type: 'QueryResult',
                    };
                },
            },
        ],
    });
    query.returns({
        rows: [
            {
                foo: 1,
            },
        ],
    });
    const result = await pool.query(sql.unsafe `SELECT 1`);
    t.deepEqual(result, {
        command: 'SELECT',
        fields: [],
        notices: [],
        rowCount: 1,
        rows: [
            {
                foo: 2,
            },
        ],
        type: 'QueryResult',
    });
});
test('executes query if "beforeQuery" does not return results', async (t) => {
    const { pool, query } = await (0, createPoolWithMockedQuery_1.createPoolWithMockedQuery)(t.context.dsn, {
        driverFactory,
        interceptors: [
            {
                beforeQueryExecution: () => {
                    return null;
                },
            },
        ],
    });
    query.returns({
        command: 'SELECT',
        fields: [],
        notices: [],
        rowCount: 1,
        rows: [
            {
                foo: 1,
            },
        ],
        type: 'QueryResult',
    });
    const result = await pool.query(sql.unsafe `SELECT 1`);
    t.deepEqual(result, {
        command: 'SELECT',
        fields: [],
        notices: [],
        rowCount: 1,
        rows: [
            {
                foo: 1,
            },
        ],
        type: 'QueryResult',
    });
});
//# sourceMappingURL=beforeQueryExecution.test.js.map