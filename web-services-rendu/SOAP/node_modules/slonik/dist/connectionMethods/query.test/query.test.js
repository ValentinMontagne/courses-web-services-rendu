"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createErrorWithCodeAndConstraint = void 0;
const createPgDriverFactory_1 = require("../../factories/createPgDriverFactory");
const createPool_1 = require("../../factories/createPool");
const createSqlTag_1 = require("../../factories/createSqlTag");
const createErrorWithCode_1 = require("../../helpers.test/createErrorWithCode");
const createTestRunner_1 = require("../../helpers.test/createTestRunner");
const sinon = __importStar(require("sinon"));
const driverFactory = (0, createPgDriverFactory_1.createPgDriverFactory)();
const { test } = (0, createTestRunner_1.createTestRunner)(driverFactory, 'pg');
const createErrorWithCodeAndConstraint = (code) => {
    const error = (0, createErrorWithCode_1.createErrorWithCode)(code);
    // @ts-expect-error â€“ This is a test helper.
    error.constraint = 'foo';
    return error;
};
exports.createErrorWithCodeAndConstraint = createErrorWithCodeAndConstraint;
const sql = (0, createSqlTag_1.createSqlTag)();
test('ends connection after promise is resolved (explicit connection)', async (t) => {
    const eventHandler = sinon.spy();
    process.on('warning', eventHandler);
    const pool = await (0, createPool_1.createPool)(t.context.dsn, { driverFactory });
    await pool.connect(async (connection) => {
        let queryCount = 20;
        const queries = [];
        while (queryCount-- > 0) {
            queries.push(connection.query(sql.unsafe `SELECT 1`));
        }
        await Promise.all(queries);
    });
    t.false(eventHandler.called);
});
test('executes the query and returns the result', async (t) => {
    const pool = await (0, createPool_1.createPool)(t.context.dsn, { driverFactory });
    const result = await pool.query(sql.unsafe `
    SELECT *
    FROM (VALUES (1)) as t(id)
  `);
    t.deepEqual(result, {
        command: 'SELECT',
        fields: [
            {
                dataTypeId: 23,
                name: 'id',
            },
        ],
        notices: [],
        rowCount: 1,
        rows: [
            {
                id: 1,
            },
        ],
        type: 'QueryResult',
    });
});
//# sourceMappingURL=query.test.js.map